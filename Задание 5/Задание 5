Для оптимизации выборки в объемных таблицах, в первую очередь можно проверить эфективность созданых индексов. Добавить новые, изменить старые, проверяя, как это скажется на скорости. Для примера: создать функциональный индекс на колонку "Дата", так как фильтрация по этому полю идет чаще всего. Так же поля "Товар" и "Аптека", если имеют тип int, можно оптимизировать с помошью b-tree индекса, который заметно ускорит процесс выборки.
Проверка "спящих транзакций" и ручное удаление таких не закрытых транзакций с пометкой "idle in transaction". 



В PostgreSQL можно хранить бинарные данные. Он поддерживает 2 вида битовых типа bit(n) и bit varying(n), где n это положительное число, отвечающее за длину значения. Длина должна быть строга равнно фактической и при попытке записать строку длинее или короче заданной, произойдет ошибка. Если не передать в скорбках число n, это подразумаевает строку не ограниченой длины.


Запрос для просмотра текущей активности сервера: select * from pg_stat_activity;